module pp/TypeSystemLanguage-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  signatures/TypeSystemLanguage-sig


imports
  signatures/common/Identifiers-sig
  signatures/common/Layout-sig
  signatures/terms/Terms-sig
  signatures/terms/Vars-sig
  signatures/Module-sig
  signatures/Signatures-sig
  signatures/TypeFunctions-sig
  signatures/Relations-sig
  signatures/PP-sig


imports
  pp/common/Identifiers-pp
  pp/common/Layout-pp
  pp/terms/Terms-pp
  pp/terms/Vars-pp
  pp/Module-pp
  pp/Signatures-pp
  pp/TypeFunctions-pp
  pp/Relations-pp
  pp/PP-pp


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Module


strategies
  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule

  prettyprint-ModuleSection :
    TypeRules(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("type rules")]
                         )
                       , H(
                           []
                         , [S("")]
                         )
                       , t1__'
                       ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> t1__]

  is-ModuleSection =
    ?TypeRules(_)

  prettyprint-TypeRule :
    TypeRuleUnCond(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-PropPattern)> t1__

  is-TypeRule =
    ?TypeRuleUnCond(_)

  prettyprint-TypeRule :
    TypeRule(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__']
                              )
                            , H(
                                [SOpt(HS(), "0")]
                              , [S("where "), t2__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-PropPattern)> t1__
    with t2__' := <pp-one-Z(prettyprint-Formula)> t2__

  is-TypeRule =
    ?TypeRule(_, _)

  prettyprint-TypeRule :
    TypeSigConst(t1__, t2__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__', S(" : "), t2__']
                                  )
                                ]
    with t1__' := <pp-H-list(prettyprint-Id|",")> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-TypeRule =
    ?TypeSigConst(_, _)

  prettyprint-TypeRule :
    TypeSigUnCond(t1__, t2__, t3__) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [ t1__'
                                           , S(" : ")
                                           , t2__'
                                           , S(" -> ")
                                           , t3__'
                                           ]
                                         )
                                       ]
    with t1__' := <pp-H-list(prettyprint-Id|",")> t1__
    with t2__' := <pp-H-list(prettyprint-Pattern|" * ")> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__

  is-TypeRule =
    ?TypeSigUnCond(_, _, _)

  prettyprint-TypeRule :
    TypeSig(t1__, t2__, t3__, t4__) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [ t1__'
                                           , S(" : ")
                                           , t2__'
                                           , S(" -> ")
                                           , t3__'
                                           ]
                                         )
                                       , H(
                                           [SOpt(HS(), "0")]
                                         , [S("where "), t4__']
                                         )
                                       ]
    with t1__' := <pp-H-list(prettyprint-Id|",")> t1__
    with t2__' := <pp-H-list(prettyprint-Pattern|" * ")> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__
    with t4__' := <pp-one-Z(prettyprint-Formula)> t4__

  is-TypeRule =
    ?TypeSig(_, _, _, _)

  is-ModuleSection =
    fail

  is-TypeRule =
    fail


strategies
  prettyprint-example =
    prettyprint-Formula

  prettyprint-Formula :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Formula)
    where t1__' := <pp-one-Z(prettyprint-Prop)> t1__

  prettyprint-Formula :
    Else(t1__, t2__, t3__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ t1__'
                                  , S(" else error ")
                                  , t2__'
                                  , S(" on ")
                                  , t3__'
                                  ]
                                )
                              ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__

  is-Formula =
    ?Else(_, _, _)

  prettyprint-Formula :
    Not(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("not "), t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__

  is-Formula =
    ?Not(_)

  prettyprint-Formula :
    Or(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("or "), t2__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__
    with t2__' := <pp-one-Z(prettyprint-Formula)> t2__

  is-Formula =
    ?Or(_, _)

  prettyprint-Formula :
    And(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__']
                         )
                       , H(
                           [SOpt(HS(), "0")]
                         , [S("and "), t2__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__
    with t2__' := <pp-one-Z(prettyprint-Formula)> t2__

  is-Formula =
    ?And(_, _)

  prettyprint-Formula :
    Label(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" :: "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-LId)> t1__
    with t2__' := <pp-one-Z(prettyprint-Formula)> t2__

  is-Formula =
    ?Label(_, _)

  prettyprint-Formula :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("(")
                               , t1__'
                               , S(")")
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__

  is-Formula =
    fail


strategies
  prettyprint-example =
    prettyprint-Formula

  prettyprint-example =
    prettyprint-Instruction

  prettyprint-Formula :
    Is(t1__) -> [ H(
                    [SOpt(HS(), "0")]
                  , [ S("[")
                    , t1__'
                    , S("]")
                    ]
                  )
                ]
    with t1__' := <pp-V-list(prettyprint-Instruction)> t1__

  is-Formula =
    ?Is(_)

  prettyprint-Instruction :
    I(t1__) -> [ H(
                   [SOpt(HS(), "0")]
                 , [t1__', S(";")]
                 )
               ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__

  is-Instruction =
    ?I(_)

  prettyprint-Instruction :
    Id(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ t1__'
                          , S(" provided ")
                          , t2__'
                          , S(";")
                          ]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__
    with t2__' := <pp-one-Z(prettyprint-VarRef)> t2__

  is-Instruction =
    ?Id(_, _)

  prettyprint-Instruction :
    Ia(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ t1__'
                          , S(" := ")
                          , t2__'
                          , S(";")
                          ]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Var)> t1__
    with t2__' := <pp-one-Z(prettyprint-Formula)> t2__

  is-Instruction =
    ?Ia(_, _)

  prettyprint-Instruction :
    Iad(t1__, t2__, t3__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ t1__'
                                 , S(" := ")
                                 , t2__'
                                 , S(" provided ")
                                 , t3__'
                                 , S(";")
                                 ]
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Var)> t1__
    with t2__' := <pp-one-Z(prettyprint-Formula)> t2__
    with t3__' := <pp-one-Z(prettyprint-VarRef)> t3__

  is-Instruction =
    ?Iad(_, _, _)

  is-Formula =
    fail

  is-Instruction =
    fail


strategies
  prettyprint-example =
    prettyprint-Prop

  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  is-Prop =
    ?True()

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  is-Prop =
    ?False()

  prettyprint-Prop :
    HasType(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" : "), t2__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Pattern)> t2__

  is-Prop =
    ?HasType(_, _)

  prettyprint-Prop :
    Has(t1__, t2__, t3__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ t1__'
                                 , S(" has ")
                                 , t2__'
                                 , S(" ")
                                 , t3__'
                                 ]
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Id)> t2__
    with t3__' := <pp-one-Z(prettyprint-Pattern)> t3__

  is-Prop =
    ?Has(_, _, _)

  prettyprint-Prop :
    Eq(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S(" == "), t2__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Prop =
    ?Eq(_, _)

  prettyprint-Prop :
    Match(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" => "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Pattern)> t2__

  is-Prop =
    ?Match(_, _)

  prettyprint-Prop :
    Bind(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__', S(" bind "), t2__']
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Var)> t2__

  is-Prop =
    ?Bind(_, _)

  prettyprint-Prop :
    Project(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" project "), t2__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-VarRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Pattern)> t2__

  is-Prop =
    ?Project(_, _)

  prettyprint-Prop :
    Return(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("return "), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__

  is-Prop =
    ?Return(_)

  is-Prop =
    fail


strategies
  prettyprint-example =
    prettyprint-PropPattern

  prettyprint-PropPattern :
    HasTypePat(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" : "), t2__']
                                )
                              ]
    with t1__' := <pp-H-list(prettyprint-Pattern|" + ")> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-PropPattern =
    ?HasTypePat(_, _)

  prettyprint-PropPattern :
    HasPat(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ t1__'
                                    , S(" has ")
                                    , t2__'
                                    , S(" ")
                                    , t3__'
                                    ]
                                  )
                                ]
    with t1__' := <pp-H-list(prettyprint-Pattern|" + ")> t1__
    with t2__' := <pp-one-Z(prettyprint-Id)> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__

  is-PropPattern =
    ?HasPat(_, _, _)

  prettyprint-PropPattern :
    IsWF(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__', S(" :-")]
                    )
                  ]
    with t1__' := <pp-H-list(prettyprint-Pattern|" + ")> t1__

  is-PropPattern =
    ?IsWF(_)

  is-PropPattern =
    fail


strategies
  prettyprint-example =
    prettyprint-Term

  prettyprint-Term :
    DefOf(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("definition of "), t1__']
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__

  is-Term =
    ?DefOf(_)

  prettyprint-Term :
    Choice(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__', S(" or "), t2__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?Choice(_, _)

  prettyprint-Term :
    Union(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" union "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?Union(_, _)

  is-Term =
    fail