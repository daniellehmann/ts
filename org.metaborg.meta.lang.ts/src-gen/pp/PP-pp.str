module src-gen/pp/PP-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  src-gen/signatures/PP-sig


imports
  src-gen/signatures/common/Identifiers-sig
  src-gen/signatures/terms/Terms-sig


imports
  src-gen/pp/common/Identifiers-pp
  src-gen/pp/terms/Terms-pp


strategies
  prettyprint-example =
    prettyprint-PropPattern

  prettyprint-PropPattern :
    HasTypePat(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" : "), t2__']
                                )
                              ]
    with t1__' := <pp-one-Z(prettyprint-Pattern)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-PropPattern =
    ?HasTypePat(_, _)

  prettyprint-PropPattern :
    HasPat(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ t1__'
                                    , S(" has ")
                                    , t2__'
                                    , S(" ")
                                    , t3__'
                                    ]
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Pattern)> t1__
    with t2__' := <pp-one-Z(prettyprint-Id)> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__

  is-PropPattern =
    ?HasPat(_, _, _)

  prettyprint-PropPattern :
    IsWF(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__', S(" :-")]
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Pattern)> t1__

  is-PropPattern =
    ?IsWF(_)

  is-PropPattern =
    fail

  prettyprint-PropPattern :
    amb([h|hs]) -> <prettyprint-PropPattern> h