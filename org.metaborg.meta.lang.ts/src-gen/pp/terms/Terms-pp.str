module src-gen/pp/terms/Terms-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  src-gen/signatures/terms/Terms-sig


imports
  src-gen/signatures/terms/Constants-sig
  src-gen/signatures/common/Identifiers-sig
  src-gen/signatures/terms/Vars-sig
  src-gen/signatures/terms/StringQuotations-sig


imports
  src-gen/pp/terms/Constants-pp
  src-gen/pp/common/Identifiers-pp
  src-gen/pp/terms/Vars-pp
  src-gen/pp/terms/StringQuotations-pp


strategies
  prettyprint-example =
    prettyprint-Pattern

  prettyprint-Pattern :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Pattern)
    where t1__' := <pp-one-Z(prettyprint-Var)> t1__

  prettyprint-Pattern :
    Int(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-Int)> t1__

  is-Pattern =
    ?Int(_)

  prettyprint-Pattern :
    Real(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Real)> t1__

  is-Pattern =
    ?Real(_)

  prettyprint-Pattern :
    Str(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-String)> t1__

  is-Pattern =
    ?Str(_)

  prettyprint-Pattern :
    Op(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ t1__'
                          , S("(")
                          , t2__'
                          , S(")")
                          ]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Id)> t1__
    with t2__' := <pp-H-list(prettyprint-Pattern|", ")> t2__

  is-Pattern =
    ?Op(_, _)

  prettyprint-Pattern :
    OpQ(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ t1__'
                           , S("(")
                           , t2__'
                           , S(")")
                           ]
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-String)> t1__
    with t2__' := <pp-H-list(prettyprint-Pattern|", ")> t2__

  is-Pattern =
    ?OpQ(_, _)

  prettyprint-Pattern :
    Char(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Char)> t1__

  is-Pattern =
    ?Char(_)

  prettyprint-Pattern :
    Tuple(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [ S("(")
                       , t1__'
                       , S(")")
                       ]
                     )
                   ]
    with t1__' := <pp-H-list(prettyprint-Pattern|", ")> t1__

  is-Pattern =
    ?Tuple(_)

  prettyprint-Pattern :
    List(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("[")
                      , t1__'
                      , S("]")
                      ]
                    )
                  ]
    with t1__' := <pp-H-list(prettyprint-Pattern|", ")> t1__

  is-Pattern =
    ?List(_)

  prettyprint-Pattern :
    ListTail(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ S("[")
                                , t1__'
                                , S(" | ")
                                , t2__'
                                , S("]")
                                ]
                              )
                            ]
    with t1__' := <pp-H-list(prettyprint-Pattern|", ")> t1__
    with t2__' := <pp-one-Z(prettyprint-Pattern)> t2__

  is-Pattern =
    ?ListTail(_, _)

  prettyprint-Pattern :
    As(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S("@"), t2__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Var)> t1__
    with t2__' := <pp-one-Z(prettyprint-Pattern)> t2__

  is-Pattern =
    ?As(_, _)

  is-Pattern =
    fail

  prettyprint-Pattern :
    amb([h|hs]) -> <prettyprint-Pattern> h


strategies
  prettyprint-example =
    prettyprint-Term

  prettyprint-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Term)
    where t1__' := <pp-one-Z(prettyprint-VarRef)> t1__

  prettyprint-Term :
    Int(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-Int)> t1__

  is-Term =
    ?Int(_)

  prettyprint-Term :
    Real(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Real)> t1__

  is-Term =
    ?Real(_)

  prettyprint-Term :
    Str(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-String)> t1__

  is-Term =
    ?Str(_)

  prettyprint-Term :
    Op(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ t1__'
                          , S("(")
                          , t2__'
                          , S(")")
                          ]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Id)> t1__
    with t2__' := <pp-H-list(prettyprint-Term|", ")> t2__

  is-Term =
    ?Op(_, _)

  prettyprint-Term :
    OpQ(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ t1__'
                           , S("(")
                           , t2__'
                           , S(")")
                           ]
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-String)> t1__
    with t2__' := <pp-H-list(prettyprint-Term|", ")> t2__

  is-Term =
    ?OpQ(_, _)

  prettyprint-Term :
    Char(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Char)> t1__

  is-Term =
    ?Char(_)

  prettyprint-Term :
    Tuple(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [ S("(")
                       , t1__'
                       , S(")")
                       ]
                     )
                   ]
    with t1__' := <pp-H-list(prettyprint-Term|", ")> t1__

  is-Term =
    ?Tuple(_)

  prettyprint-Term :
    List(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("[")
                      , t1__'
                      , S("]")
                      ]
                    )
                  ]
    with t1__' := <pp-H-list(prettyprint-Term|", ")> t1__

  is-Term =
    ?List(_)

  prettyprint-Term :
    ListTail(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ S("[")
                                , t1__'
                                , S(" | ")
                                , t2__'
                                , S("]")
                                ]
                              )
                            ]
    with t1__' := <pp-H-list(prettyprint-Term|", ")> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Term =
    ?ListTail(_, _)

  prettyprint-Term :
    StrInterp(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-PPTerm)> t1__

  is-Term =
    ?StrInterp(_)

  is-Term =
    fail

  prettyprint-Term :
    amb([h|hs]) -> <prettyprint-Term> h